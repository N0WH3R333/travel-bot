import logging
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.constants import ParseMode
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
)

logger = logging.getLogger(__name__)

from config import CHANNEL_BUTTONS_CONFIG
from services.database import get_all_users, get_channel_stats, get_user_ids_by_channel, full_resync_channel_members

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏–∑ —Å–æ—Å–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
try:
    from .calculate import (
        commission_calculator_start,
        commission_calculator_receive_price,
        back_to_main_admin_menu as calculator_back_to_main,
        COMMISSION_CALCULATOR_INPUT,
        CB_ADMIN_COMMISSION_CALCULATOR,
        CB_ADMIN_BACK_TO_MAIN_FROM_CALCULATOR,
    )
except ImportError:
    logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å 'calculate.py'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'handlers'.")
    async def _dummy_unavailable_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        if update.callback_query:
            await update.callback_query.answer("–û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return ConversationHandler.END
    commission_calculator_start = _dummy_unavailable_handler
    commission_calculator_receive_price = _dummy_unavailable_handler
    calculator_back_to_main = _dummy_unavailable_handler
    COMMISSION_CALCULATOR_INPUT = -99
    CB_ADMIN_COMMISSION_CALCULATOR = "calculator_unavailable"
    CB_ADMIN_BACK_TO_MAIN_FROM_CALCULATOR = "calculator_back_unavailable"

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ---
(
    CHOOSING_ACTION,
    SHOWING_STATS,
    # –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    CHOOSE_TARGET,
    CHOOSE_TYPE,
    GET_CONTENT,
    CONFIRM_BROADCAST,
) = range(6)

# --- –î–ê–ù–ù–´–ï –î–õ–Ø –ö–ù–û–ü–û–ö (CALLBACK DATA) ---
CB_BROADCAST_START = "broadcast_start"
CB_SHOW_STATS = "show_stats"
CB_BACK_TO_MAIN = "admin_back_to_main"
CB_SYNC_SUBSCRIBERS = "sync_subscribers"
CB_BROADCAST_CANCEL = "broadcast_cancel"

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
async def get_main_admin_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞."""
    keyboard = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì¨", callback_data=CB_BROADCAST_START)],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data=CB_SHOW_STATS)],
        [InlineKeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏ üßÆ", callback_data=CB_ADMIN_COMMISSION_CALCULATOR)],
        [InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data=CB_SYNC_SUBSCRIBERS)],
    ]
    return InlineKeyboardMarkup(keyboard)

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!"
    reply_markup = await get_main_admin_menu_keyboard()
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    return CHOOSING_ACTION

# === –°–ï–ö–¶–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."""
    query = update.callback_query
    await query.answer()
    total_bot_users = len(get_all_users())
    channel_stats = get_channel_stats()
    channel_names = {config[0]: f"{config[2]} {config[1]}" for config in CHANNEL_BUTTONS_CONFIG if config[0]}
    
    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    stats_text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–ø—É—Å—Ç–∏–≤—à–∏—Ö –±–æ—Ç–∞: <code>{total_bot_users}</code>\n\n"
    stats_text += "<b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö:</b>\n"
    if channel_stats:
        for channel_id, count in channel_stats.items():
            name = channel_names.get(int(channel_id), f"–ö–∞–Ω–∞–ª ID: {channel_id}")
            stats_text += f"  ‚Ä¢ {name}: <code>{count}</code>\n"
    else:
        stats_text += "<i>–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –≤ –∫–∞–Ω–∞–ª–∞—Ö.</i>"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK_TO_MAIN)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(stats_text, parse_mode='HTML', reply_markup=reply_markup)
    return SHOWING_STATS

# === –°–ï–ö–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===
async def sync_subscribers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤."""
    query = update.callback_query
    await query.answer("–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    all_bot_users = get_all_users()
    channels_to_sync = [config[0] for config in CHANNEL_BUTTONS_CONFIG if config[0]]
    total_synced_count = 0
    for channel_id in channels_to_sync:
        current_channel_members = []
        for user_id in all_bot_users:
            try:
                member = await context.bot.get_chat_member(chat_id=channel_id, user_id=user_id)
                if member.status in ['member', 'administrator', 'creator']:
                    current_channel_members.append(user_id)
            except Exception:
                continue
        full_resync_channel_members(channel_id, current_channel_members)
        total_synced_count += len(current_channel_members)
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(current_channel_members)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
    await query.edit_message_text(
        f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É: {total_synced_count} –ø–æ–¥–ø–∏—Å–æ–∫.",
        reply_markup=await get_main_admin_menu_keyboard()
    )
    return CHOOSING_ACTION

# === –°–ï–ö–¶–ò–Ø –†–ê–°–°–´–õ–ö–ò ===
async def start_broadcast_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é."""
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="target_all")]]
    for group_id, text, emoji in CHANNEL_BUTTONS_CONFIG:
        if group_id:
            keyboard.append([InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º ¬´{emoji} {text}¬ª", callback_data=f"target_{group_id}")])
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=CB_BROADCAST_CANCEL)])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=reply_markup)
    return CHOOSE_TARGET

async def choose_broadcast_target(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    query = update.callback_query
    target = query.data.replace("target_", "")
    context.user_data['broadcast_target'] = target
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="type_single")],
        [InlineKeyboardButton("–ì—Ä—É–ø–ø–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", callback_data="type_group")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=CB_BROADCAST_CANCEL)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=reply_markup)
    return CHOOSE_TYPE

async def ask_for_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞."""
    query = update.callback_query
    choice = query.data
    await query.answer()
    context.user_data.pop('broadcast_messages', None)
    context.user_data.pop('limit_warning_sent', None)
    if choice == 'type_single':
        await query.edit_message_text(text="–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∏ —Ç.–¥.).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    elif choice == 'type_group':
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ, —è –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)", callback_data="group_done")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CB_BROADCAST_CANCEL)],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º. –¢–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º, —Å—Ç–∞–Ω–µ—Ç –æ–±—â–µ–π –ø–æ–¥–ø–∏—Å—å—é.\n\n"
                 "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=reply_markup
        )
    return GET_CONTENT

async def get_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–¥–∏–Ω–æ—á–Ω—ã–π –∏–ª–∏ –≤ —Å–æ—Å—Ç–∞–≤–µ –≥—Ä—É–ø–ø—ã)."""
    if 'broadcast_messages' not in context.user_data:
        context.user_data['broadcast_messages'] = []
    if update.message.media_group_id:
        if len(context.user_data['broadcast_messages']) < 10:
            context.user_data['broadcast_messages'].append(update.message)
        else:
            if not context.user_data.get('limit_warning_sent'):
                await update.message.reply_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
                context.user_data['limit_warning_sent'] = True
        return GET_CONTENT
    else:
        context.user_data['broadcast_messages'] = [update.message]
        await ask_for_confirmation(update, context)
        return CONFIRM_BROADCAST

async def finish_group_collection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    if not context.user_data.get('broadcast_messages'):
        await query.edit_message_text("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        context.user_data.clear()
        return await admin_start(update, context)
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ì—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å–æ–±—Ä–∞–Ω–∞.")
    await ask_for_confirmation(update, context)
    return CONFIRM_BROADCAST

async def ask_for_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CB_BROADCAST_CANCEL)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    num_messages = len(context.user_data.get('broadcast_messages', []))
    message_type = f"–≥—Ä—É–ø–ø—É –∏–∑ {num_messages} –º–µ–¥–∏–∞" if num_messages > 1 else "—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å {message_type}?",
        reply_markup=reply_markup
    )

async def process_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    messages = context.user_data.get('broadcast_messages', [])
    target_group = context.user_data.get('broadcast_target')
    if not messages or not target_group:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        context.user_data.clear()
        return await admin_start(update, context)
    if target_group == 'all':
        user_ids = get_all_users()
    else:
        channel_id = int(target_group)
        user_ids = get_user_ids_by_channel(channel_id)
    if not user_ids:
        await query.edit_message_text("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        context.user_data.clear()
        return await admin_start(update, context)
    await query.edit_message_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    success_count = 0
    error_count = 0
    if len(messages) > 1:
        media_list = []
        caption = next((msg.caption for msg in messages if msg.caption), "")
        for i, msg in enumerate(messages):
            extra_args = {'caption': caption, 'parse_mode': ParseMode.HTML} if i == 0 and caption else {}
            if msg.photo:
                media_list.append(InputMediaPhoto(media=msg.photo[-1].file_id, **extra_args))
            elif msg.video:
                media_list.append(InputMediaVideo(media=msg.video.file_id, **extra_args))
        if not media_list:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É.")
        else:
            for user_id in user_ids:
                try:
                    await context.bot.send_media_group(chat_id=user_id, media=media_list, read_timeout=30, write_timeout=30)
                    success_count += 1
                    time.sleep(0.1)
                except Exception as e:
                    error_count += 1
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        message_to_send = messages[0]
        for user_id in user_ids:
            try:
                await message_to_send.copy(chat_id=user_id)
                success_count += 1
                time.sleep(0.1)
            except Exception as e:
                error_count += 1
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\nüëé –û—à–∏–±–æ–∫: {error_count}"
    )
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    time.sleep(1)
    return await admin_start(update, context)

# === –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ===
admin_handler = ConversationHandler(
    entry_points=[CommandHandler("admin", admin_start)],
    states={
        CHOOSING_ACTION: [
            CallbackQueryHandler(start_broadcast_dialog, pattern=f"^{CB_BROADCAST_START}$"),
            CallbackQueryHandler(show_stats, pattern=f"^{CB_SHOW_STATS}$"),
            CallbackQueryHandler(sync_subscribers, pattern=f"^{CB_SYNC_SUBSCRIBERS}$"),
            CallbackQueryHandler(commission_calculator_start, pattern=f"^{CB_ADMIN_COMMISSION_CALCULATOR}$"),
        ],
        SHOWING_STATS: [CallbackQueryHandler(admin_start, pattern=f"^{CB_BACK_TO_MAIN}$")],
        COMMISSION_CALCULATOR_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, commission_calculator_receive_price),
            CallbackQueryHandler(calculator_back_to_main, pattern=f"^{CB_ADMIN_BACK_TO_MAIN_FROM_CALCULATOR}$"),
        ],
        CHOOSE_TARGET: [CallbackQueryHandler(choose_broadcast_target, pattern='^target_')],
        CHOOSE_TYPE: [CallbackQueryHandler(ask_for_content, pattern='^type_(single|group)$')],
        GET_CONTENT: [
            MessageHandler(filters.ALL & ~filters.COMMAND, get_content),
            CallbackQueryHandler(finish_group_collection, pattern='^group_done$')
        ],
        CONFIRM_BROADCAST: [CallbackQueryHandler(process_broadcast, pattern='^broadcast_confirm$')]
    },
    fallbacks=[
        CommandHandler('cancel', cancel_action),
        CallbackQueryHandler(cancel_action, pattern=f"^{CB_BROADCAST_CANCEL}$"),
        CallbackQueryHandler(admin_start, pattern=f"^{CB_BACK_TO_MAIN}$"),
    ],
    conversation_timeout=600,
    allow_reentry=True,
)
