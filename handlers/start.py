import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, constants
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from services.database import add_user
from config import CHANNEL_BUTTONS_CONFIG, SUPER_ADMIN_ID

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–ø–µ—á–∞—Ç–æ–∫
CB_CALCULATOR = "calculator"
CB_ADMIN_PANEL = "admin_panel"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã."""
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    add_user(user_id=user.id, username=user.username, first_name=user.first_name)

    url_buttons = []
    # --- –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã ---
    for group_id, text, emoji in CHANNEL_BUTTONS_CONFIG:
        if not group_id:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω –≤ .env
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –∫—ç—à–µ
            url = context.bot_data.get(group_id)
            if not url:
                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏ –∫—ç—à–∏—Ä—É–µ–º –µ–µ
                link_obj = await context.bot.create_chat_invite_link(chat_id=group_id)
                url = link_obj.invite_link
                context.bot_data[group_id] = url
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {group_id}.")
            
            url_buttons.append([InlineKeyboardButton(f"{emoji} {text}", url=url)])
        except TelegramError as e:
            # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤, –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞, –∞ –≤ –ª–æ–≥ –∑–∞–ø–∏—à–µ—Ç—Å—è –æ—à–∏–±–∫–∞
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–∞ {group_id}. "
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –û—à–∏–±–∫–∞: {e}"
            )

    # --- –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
    action_buttons = [
        [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data=CB_CALCULATOR)],
    ]
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if str(user.id) == str(SUPER_ADMIN_ID):
        action_buttons.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data=CB_ADMIN_PANEL)])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏: —Å–Ω–∞—á–∞–ª–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã, –ø–æ—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏—è
    full_keyboard = url_buttons + action_buttons
    reply_markup = InlineKeyboardMarkup(full_keyboard) if full_keyboard else None

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    )

    # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not full_keyboard:
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
        )

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=constants.ParseMode.HTML
    )
