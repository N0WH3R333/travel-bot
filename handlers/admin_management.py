import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from config import SUPER_ADMIN_ID
from services.database import add_admin, remove_admin, get_all_admins

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHOOSING_MANAGE_ACTION, GET_ID_TO_ADD, GET_ID_TO_REMOVE = range(3)

# Callback Data
CB_ADD_ADMIN = "add_admin"
CB_REMOVE_ADMIN = "remove_admin"
CB_LIST_ADMINS = "list_admins"
CB_BACK_TO_MANAGE_MENU = "back_to_manage_menu"


async def manage_admins_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=CB_ADD_ADMIN)],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=CB_REMOVE_ADMIN)],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data=CB_LIST_ADMINS)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=reply_markup)
    return CHOOSING_MANAGE_ACTION


async def ask_for_admin_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    return GET_ID_TO_ADD


async def process_add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞."""
    try:
        user_id = int(update.message.text)
        if add_admin(user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            logger.info(f"SuperAdmin {update.effective_user.id} added new admin: {user_id}")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await manage_admins_start(update, context)
    return ConversationHandler.END


async def show_admins_for_removal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    admins = get_all_admins()

    if not admins:
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK_TO_MANAGE_MENU)]]))
        return CHOOSING_MANAGE_ACTION

    keyboard = []
    for admin_id in admins:
        # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –∏–ª–∏ get_chat, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º ID
        keyboard.append([InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {admin_id}", callback_data=f"remove_{admin_id}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK_TO_MANAGE_MENU)])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    return GET_ID_TO_REMOVE


async def process_remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    query = update.callback_query
    user_id_to_remove = int(query.data.split('_')[1])

    if remove_admin(user_id_to_remove):
        await query.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id_to_remove} —É–¥–∞–ª–µ–Ω.", show_alert=True)
        logger.info(f"SuperAdmin {update.effective_user.id} removed admin: {user_id_to_remove}")
    else:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    return await show_admins_for_removal(update, context)


async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    admins = get_all_admins()
    
    if not admins:
        text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç."
    else:
        text = "–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n" + "\n".join([f"‚Ä¢ `{admin_id}`" for admin_id in admins])
    
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK_TO_MANAGE_MENU)]])
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')
    return CHOOSING_MANAGE_ACTION


async def back_to_manage_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –º–µ–Ω—é
    await manage_admins_start(query, context)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –æ–Ω –Ω–µ "–∑–∞–≤–∏—Å"
    return ConversationHandler.END


manage_admins_handler = ConversationHandler(
    entry_points=[CommandHandler("manage_admins", manage_admins_start, filters=filters.User(user_id=SUPER_ADMIN_ID))],
    states={
        CHOOSING_MANAGE_ACTION: [
            CallbackQueryHandler(ask_for_admin_id, pattern=f"^{CB_ADD_ADMIN}$"),
            CallbackQueryHandler(show_admins_for_removal, pattern=f"^{CB_REMOVE_ADMIN}$"),
            CallbackQueryHandler(list_admins, pattern=f"^{CB_LIST_ADMINS}$"),
        ],
        GET_ID_TO_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_add_admin)],
        GET_ID_TO_REMOVE: [
            CallbackQueryHandler(process_remove_admin, pattern="^remove_"),
            CallbackQueryHandler(back_to_manage_menu, pattern=f"^{CB_BACK_TO_MANAGE_MENU}$"),
        ],
    },
    fallbacks=[CommandHandler("manage_admins", manage_admins_start)],
)